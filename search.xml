<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Vue的基础语法</title>
    <url>/2021/05/27/Vue%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-插值操作"><a href="#1-插值操作" class="headerlink" title="1. 插值操作"></a>1. 插值操作</h1><h2 id="1-1-Mustache语法"><a href="#1-1-Mustache语法" class="headerlink" title="1.1 Mustache语法"></a>1.1 Mustache语法</h2><p>Mustache语法中不仅可以直接写变量，还可以写一些简单的表达式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>message:&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; firstName+' '+lastName &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; firstName &#125;&#125; &#123;&#123; lastName &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="1-2-v-once"><a href="#1-2-v-once" class="headerlink" title="1.2 v-once"></a>1.2 v-once</h2><p>通过使用v-once可以完成一次性地插值，使内容不会随数据的改变而改变：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-once</span>&gt;</span>message:&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-3-v-html"><a href="#1-3-v-html" class="headerlink" title="1.3 v-html"></a>1.3 v-html</h2><p>如果直接使用&lbrace;&lbrace;&nbsp;&rbrace;&rbrace;输出会直接以字符串形式展示，而使用v-html可以解析字符串中的html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; url &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- v-html:对html标签进行解析 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">      url:'<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-4-v-text"><a href="#1-4-v-text" class="headerlink" title="1.4 v-text"></a>1.4 v-text</h2><p>用的不多，因为使用v-text时会将标签中原有的内容覆盖。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span>,hello<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-5-v-pre"><a href="#1-5-v-pre" class="headerlink" title="1.5 v-pre"></a>1.5 v-pre</h2><p>有时不想让Vue解析Mustache语法，就可以使用v-pre将内容原封不动地展示而不做解析。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-6-v-cloak"><a href="#1-6-v-cloak" class="headerlink" title="1.6 v-cloak"></a>1.6 v-cloak</h2><p>浏览器解析html代码时是从上往下解析的，如果在频繁刷新或者网速很慢的情况下可能会先出现闪动的效果，此时可以使用v-cloak。在Vue解析之前存在v-cloak属性，解析之后会自动删除。我们可以根据有无此属性决定这段html代码是否要显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">          message:<span class="string">'你好'</span></span></span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,1000)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="2-v-bind"><a href="#2-v-bind" class="headerlink" title="2. v-bind"></a>2. v-bind</h1><p>v-bind作用：动态绑定属性。语法糖：<strong>：</strong></p>
<h2 id="2-1-v-bind动态绑定class"><a href="#2-1-v-bind动态绑定class" class="headerlink" title="2.1 v-bind动态绑定class"></a>2.1 v-bind动态绑定class</h2><h3 id="2-1-1-对象语法"><a href="#2-1-1-对象语法" class="headerlink" title="2.1.1 对象语法"></a>2.1.1 对象语法</h3><p>v-bind动态绑定对象，通过使用&lbrace;类名1：boolean,&nbsp;类名2:boolean&rbrace;控制布尔值来控制class。</p>
<blockquote>
<p>对象语法有下面这些用法：<br>用法一：直接通过&lbrace;&rbrace;绑定一个类<br>用法二：也可以通过判断，传入多个值<br>用法三：和普通的类同时存在，并不冲突<br>用法四：如果过于复杂，可以放在一个methods或者computed中</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:class</span>=<span class="string">"active"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:class</span>=<span class="string">'&#123;active:isActive,line:isLine&#125;'</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:class</span>=<span class="string">'getClasses()'</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"btnClick"</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">'hello'</span>,</span></span><br><span class="line"><span class="actionscript">      active:<span class="string">'active'</span>,</span></span><br><span class="line"><span class="actionscript">      isActive:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      isLine:<span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="actionscript">      btnClick:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.isActive=!<span class="keyword">this</span>.isActive</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      getClasses:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;active:<span class="keyword">this</span>.isActive,line:<span class="keyword">this</span>.isLine&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-数组语法"><a href="#2-1-2-数组语法" class="headerlink" title="2.1.2 数组语法"></a>2.1.2 数组语法</h3><blockquote>
<p>数组语法有下面这些用法：<br>用法一：直接通过&#91;&#93;绑定一个类<br>用法二：也可以通过判断，传入多个值<br>用法三：和普通的类同时存在，并不冲突<br>用法四：如果过于复杂，可以放在一个methods或者computed中</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:class</span>=<span class="string">"['active','line']"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:class</span>=<span class="string">"[active,line]"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:class</span>=<span class="string">"getClasses()"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">'nihao'</span>,</span></span><br><span class="line"><span class="actionscript">      active:<span class="string">'aaa'</span>,</span></span><br><span class="line"><span class="actionscript">      line:<span class="string">'bbb'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="actionscript">      getClasses: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> [<span class="keyword">this</span>.active,<span class="keyword">this</span>.line]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-v-bind动态绑定style"><a href="#2-2-v-bind动态绑定style" class="headerlink" title="2.2 v-bind动态绑定style"></a>2.2 v-bind动态绑定style</h2><p>v-bind动态绑定style同样可以采用对象语法和数组语法两种方式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h3 v-bind:style='&#123;css属性名：属性值...&#125;'&gt;&#123;&#123; message &#125;&#125;&lt;/h3&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 50px必须双引号，否则当成变量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-bind:style</span>=<span class="string">'&#123;fontSize:"50px"&#125;'</span>&gt;</span>&#123; &#123;message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:style</span>=<span class="string">'&#123;fontSize:finalSize+'</span><span class="attr">px</span>',<span class="attr">color:finalColor</span>&#125;'&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:style</span>=<span class="string">'getStyles()'</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">'hi'</span>,</span></span><br><span class="line">      finalSize:100,</span><br><span class="line"><span class="actionscript">      finalColor:<span class="string">'red'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="actionscript">      getStyles:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123; fontSize:<span class="keyword">this</span>.finalSize,color:<span class="keyword">this</span>.finalColor &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="3-计算属性"><a href="#3-计算属性" class="headerlink" title="3. 计算属性"></a>3. 计算属性</h1><p>在某些情况下，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据合并起来显示，此时可以使用computed。</p>
<p>复杂操作：计算书的总价格，通过计算属性进行汇总展示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>总价格：&#123;&#123; totalPrice &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      books:[&#123;id:<span class="number">110</span>,name:<span class="string">'计算机原理'</span>,price:<span class="number">119</span>&#125;,</span></span><br><span class="line"><span class="actionscript">            &#123;id:<span class="number">111</span>,name:<span class="string">'代码大全'</span>,price:<span class="number">88</span>&#125;,</span></span><br><span class="line"><span class="actionscript">            &#123;id:<span class="number">112</span>,name:<span class="string">'操作系统'</span>,price:<span class="number">67</span>&#125;]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line"><span class="actionscript">      totalPrice:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> result=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.books.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">          result+=<span class="keyword">this</span>.books[i].price</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> result</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-1-计算属性的setter和getter"><a href="#3-1-计算属性的setter和getter" class="headerlink" title="3.1 计算属性的setter和getter"></a>3.1 计算属性的setter和getter</h2><p>每个计算属性都包含一个getter和setter。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  <span class="comment">//计算属性一般没有set方法，只读属性</span></span><br><span class="line">  fullName:&#123;</span><br><span class="line">    <span class="keyword">set</span>:function(newValue)&#123;</span><br><span class="line">      <span class="keyword">const</span> names = newValue.split(<span class="string">' '</span>);</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[<span class="number">1</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>:function()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-computed和methods比较"><a href="#3-2-computed和methods比较" class="headerlink" title="3.2 computed和methods比较"></a>3.2 computed和methods比较</h2><p>computed是属性调用，而methods是函数调用。computed是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值。而methods会进行重复调用。</p>
<h1 id="4-v-on"><a href="#4-v-on" class="headerlink" title="4. v-on"></a>4. v-on</h1><p>v-on作用：绑定事件监听器。语法糖：<strong>@</strong></p>
<h2 id="4-1-v-on的参数传递问题"><a href="#4-1-v-on的参数传递问题" class="headerlink" title="4.1 v-on的参数传递问题"></a>4.1 v-on的参数传递问题</h2><blockquote>
<p>情况一：如果该方法不需要额外参数，那么方法后的&#40;&#41;可以不添加&#40;但是注意：如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去&#41;<br>情况二：如果需要同时传入某个参数，同时需要event，可以通过$event传入事件。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 事件调用方法没有参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btn1Click()'</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btn1Click'</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在事件定义时，写函数时省略了小括号,但是方法本身需要一个参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btn2Click(22)'</span>&gt;</span>btn2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btn2Click'</span>&gt;</span>btn2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 方法定义时，需要event对象，也需要其他参数 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在调用方法时，如何手动获取到浏览器event对象：$event --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btn3Click'</span>&gt;</span>btn3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btn3Click(33)'</span>&gt;</span>btn3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btn3Click(33,$event)'</span>&gt;</span>btn3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>btn4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">'hi'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      btn1Click()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'11'</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      btn2Click(event)&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      btn3Click(abc,event)&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(abc + <span class="string">"   "</span> + event);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-v-on的修饰符使用"><a href="#4-2-v-on的修饰符使用" class="headerlink" title="4.2 v-on的修饰符使用"></a>4.2 v-on的修饰符使用</h2><p>在某些情况下，我们拿到event的目的可能是进行一些事件处理。Vue提供了一些修饰符来帮助我们方便的处理一些事件：</p>
<blockquote>
<p>.stop&nbsp;&nbsp;调用event.stopPropagation()<br>.prevent&nbsp;&nbsp;调用event.preventDefault()<br>.&lbrace;keycode|keyAlias&rbrace;&nbsp;&nbsp;只当事件是从特定键触发时才出发回调<br>.native&nbsp;&nbsp;监听组件根元素的原生事件<br>.once&nbsp;&nbsp;只触发一次回调</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'divClick'</span>&gt;</span></span><br><span class="line">    啊啊啊啊</span><br><span class="line">    <span class="comment">&lt;!-- .stop修饰符：阻止事件冒泡 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">'btnClick'</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- .prevent：阻止默认事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"baidu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> @<span class="attr">click.prevent</span>=<span class="string">'submitClick'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 监听键盘某个按键点击 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">'KeyUp'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">'hi'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      btnClick()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'btn'</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      divClick()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'div'</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      submitClick()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'submit'</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      KeyUp()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'keyup'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="5-v-if和v-else-if和v-else"><a href="#5-v-if和v-else-if和v-else" class="headerlink" title="5. v-if和v-else-if和v-else"></a>5. v-if和v-else-if和v-else</h1><p>原理：v-if后面的条件为false时，对应的元素及其子元素不会渲染，也就是根本不会有对应的标签出现在DOM中。</p>
<blockquote>
<p>案例中小问题：再输入内容后切换了类型，文字依然显示原先输入的内容。<br>原因：Vue再进行DOM渲染时，出于性能考虑会尽可能复用已经存在的元素，而不是重新创建型元素。<br>解决方法：如果不希望出现类似复用的情况，可以给对应的input添加key，并且需要保证key的不同。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 存在input复用的问题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">'isUser'</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决方式：加一个key --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"用户账户"</span> <span class="attr">key</span>=<span class="string">'username'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱"</span> <span class="attr">key</span>=<span class="string">'email'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span>	</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'isUser=!isUser'</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      isUser:<span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>v-if和v-show都可以决定一个元素是否渲染。区别是v-if当条件为false时根本不会有对应元素存在在DOM中，而v-show条件为false时，只是将元素的display属性设置为none。因此在需要频繁切换时选择v-show，当只有一次切换时选择使用v-if。</p>
<h1 id="6-v-for"><a href="#6-v-for" class="headerlink" title="6. v-for"></a>6. v-for</h1><h2 id="6-1-v-for遍历数组和对象"><a href="#6-1-v-for遍历数组和对象" class="headerlink" title="6.1 v-for遍历数组和对象"></a>6.1 v-for遍历数组和对象</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 遍历过程中没有使用索引值（下标） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'i in names'</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 遍历过程中，获取索引值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'(item,index) in names'</span>&gt;</span>&#123;&#123;index+1&#125;&#125;.&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 遍历对象过程中，只获取一个值，获取到的是value --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'item in info'</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 获取key和value ,value更重要，在第一个位置获取--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'(value,key) in info'</span>&gt;</span>&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 获取key,value,index （index用的少）--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'(value,key,index) in info'</span>&gt;</span>&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;-&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      names:[<span class="string">'一一'</span>,<span class="string">'二二'</span>,<span class="string">'三三'</span>,<span class="string">'小白'</span>],</span></span><br><span class="line">      info:&#123;</span><br><span class="line"><span class="actionscript">        name:<span class="string">'doublewhite'</span>,</span></span><br><span class="line">        age:10,</span><br><span class="line">        height:100</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-2-v-for绑定和非绑定key区别"><a href="#6-2-v-for绑定和非绑定key区别" class="headerlink" title="6.2 v-for绑定和非绑定key区别"></a>6.2 v-for绑定和非绑定key区别</h2><p>key的作用主要是为了高效的更新虚拟DOM。绑定key要保证key具有唯一性，不然没有太大意义。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in letters"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      letters:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="7-数组中哪些方法是响应式的"><a href="#7-数组中哪些方法是响应式的" class="headerlink" title="7. 数组中哪些方法是响应式的"></a>7. 数组中哪些方法是响应式的</h1><p>因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图发生对应的更新。Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。</p>
<blockquote>
<p>push()<br>pop()<br>shift()<br>unshift()<br>splice()<br>sort()<br>reverse()</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'i in letters'</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btnClick'</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      letters:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      btnClick()&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 1.push方法</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.push(<span class="string">'d'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.push(<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2.pop()删除数组中最后一个元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.pop();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3.shift()删除数组中的第一个元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.shift();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4.unshift()在数组最前面添加元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.unshift(<span class="string">'letters:'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.unshift(<span class="string">'letters:'</span>,<span class="string">'look:'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//删除元素、插入元素、替换元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 5.splice(start,删除元素个数)</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.splice(<span class="number">1</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// splice(start,替换元素个数，替换内容)</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.splice(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'m'</span>,<span class="string">'n'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//插入元素：第二个元素传入0</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="string">'d'</span>,<span class="string">'e'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//排序</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.sort();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 反转</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.letters.reverse();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 注意：这不是响应式的！</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// this.letters[0]='aaa';</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//Vue内部修改方法</span></span></span><br><span class="line"><span class="actionscript">        Vue.set(<span class="keyword">this</span>.letters,<span class="number">0</span>,<span class="string">'aaa'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="8-表单绑定v-model"><a href="#8-表单绑定v-model" class="headerlink" title="8. 表单绑定v-model"></a>8. 表单绑定v-model</h1><p>Vue使用v-model指令来实现表单元素和数据的双向绑定。当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。</p>
<blockquote>
<p>v-model其实是一个语法糖，他背后本质上包含两个操作：<br>v-bind绑定一个value元素<br>v-on指令给当前元素绑定input事件</p>
</blockquote>
<h2 id="8-1-v-model结合radio类型使用"><a href="#8-1-v-model结合radio类型使用" class="headerlink" title="8.1 v-model结合radio类型使用"></a>8.1 v-model结合radio类型使用</h2><p>ps：v-model绑定radio时，可以不添加name属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的是：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      sex:<span class="string">'男'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-2-v-model结合checkbox类型使用"><a href="#8-2-v-model结合checkbox类型使用" class="headerlink" title="8.2 v-model结合checkbox类型使用"></a>8.2 v-model结合checkbox类型使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- checkbox单选框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"agree"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"agree"</span> <span class="attr">v-model</span>=<span class="string">"isAgree"</span>&gt;</span>同意协议</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的是：&#123;&#123;isAgree&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!isAgree"</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- checkbox多选框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"篮球"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>&gt;</span>篮球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"足球"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>&gt;</span>足球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"乒乓球"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>&gt;</span>乒乓球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"羽毛球"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>&gt;</span>羽毛球</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>您的爱好是&#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      isAgree:<span class="literal">false</span>,</span></span><br><span class="line">      hobbies:[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-3-v-model结合select类型使用"><a href="#8-3-v-model结合select类型使用" class="headerlink" title="8.3 v-model结合select类型使用"></a>8.3 v-model结合select类型使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"abc"</span> <span class="attr">v-model</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 选择一个 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"水蜜桃"</span>&gt;</span>水蜜桃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"草莓"</span>&gt;</span>草莓<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"葡萄"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>您选择的水果是：&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 按住ctrl 选择多个 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"abc"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"水蜜桃"</span>&gt;</span>水蜜桃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"草莓"</span>&gt;</span>草莓<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"葡萄"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>您选择的水果是：&#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      fruit:<span class="string">'草莓'</span>,</span></span><br><span class="line">      fruits:[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-4-input中的值绑定"><a href="#8-4-input中的值绑定" class="headerlink" title="8.4 input中的值绑定"></a>8.4 input中的值绑定</h2><blockquote>
<p>前面的value中的值都是在定义input的时候直接给定的。<br>但我们也可以通过v-bind:value动态的给value绑定值。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">"item in originHobbies"</span> <span class="attr">:for</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:value</span>=<span class="string">"item"</span> <span class="attr">id</span>=<span class="string">"item"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>您的爱好是&#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line">      hobbies:[],</span><br><span class="line"><span class="actionscript">      originHobbies:[<span class="string">'篮球'</span>,<span class="string">'足球'</span>,<span class="string">'乒乓球'</span>,<span class="string">'羽毛球'</span>,<span class="string">'台球'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-5-修饰符"><a href="#8-5-修饰符" class="headerlink" title="8.5 修饰符"></a>8.5 修饰符</h2><blockquote>
<p>lazy修饰符：默认情况下，v-model默认是在input事件中同步输入框的数据的，lazy修饰符可以让数据在失去焦点和回车时才会更新。<br>number修饰符：默认情况下无论输入的是字母还是数字都会被当成字符串类型进行处理。number修饰符可以让在输入框中输入的内容自动转成数字类型。<br>trim修饰符：如果输入内容的首尾有很多空格，trim修饰符可以过滤左右两边的空格。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- lazy修饰符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- number修饰符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;typeof age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- trim修饰符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">'hello'</span>,</span></span><br><span class="line"><span class="actionscript">      age:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">      name:<span class="string">''</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue模块化开发</title>
    <url>/2021/06/17/Vue%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="1-常见的模块化规范"><a href="#1-常见的模块化规范" class="headerlink" title="1. 常见的模块化规范"></a>1. 常见的模块化规范</h1><h2 id="1-1-CommonJS"><a href="#1-1-CommonJS" class="headerlink" title="1.1 CommonJS"></a>1.1 CommonJS</h2><p>模块：将一个复杂的程序依据一定的规范封装成几个块, 并进行组合。模块化有两个核心：导入和导出。</p>
<blockquote>
<p>导出：module.exports={ add }<br>导入：const {add}=require(‘./mathUtils.js’);</p>
</blockquote>
<a id="more"></a>

<h2 id="1-2-ES6模块化"><a href="#1-2-ES6模块化" class="headerlink" title="1.2 ES6模块化"></a>1.2 ES6模块化</h2><p>ES6中新增了两个关键字：export和import。首先需要引入js文件并设置类型为module。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"aaa.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>export指令用于导出变量、函数/类：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;flag,sum&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> num1=<span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<p>import指令用于导入变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;flag,sum&#125; <span class="keyword">from</span> <span class="string">"./aaa.js"</span>;</span><br></pre></td></tr></table></figure>
<p>如果希望将某个模块中所有的信息都导入，可以通过*导入模块中所有的export变量。通常我们需要给*起一个别名，方便后续使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aaa <span class="keyword">from</span> <span class="string">"./aaa.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aaa.flag);</span><br></pre></td></tr></table></figure>
<p>某些情况下，一个模块中包含某一个功能，我们并不希望给这个功能命名，而是让导入者自己来命名，此时就可以使用export&nbsp;default。另外需要注意export&nbsp;default在同一个模块中不允许同时存在多个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> address;</span><br><span class="line"><span class="keyword">import</span> addr <span class="keyword">from</span> <span class="string">"./aaa.js"</span></span><br></pre></td></tr></table></figure>
<h1 id="2-webpack"><a href="#2-webpack" class="headerlink" title="2. webpack"></a>2. webpack</h1><p>webpack是一个现代的JavaScript应用的静态模块打包工具。webpack其中一个核心就是让我们进行模块化开发，并且帮助我们处理模块间的依赖关系。打包就是webpack中的各种资源模块进行打包合并成一个或多个包。<br><br>webpack和grunt/gulp的对比：grunt/gulp的核心是Task，如果工程模块依赖非常简单就使用grunt/gulp。grunt/gulp更加强调的是前端流程的自动化，模块化不是它的核心。webpack更加强调模块化开发管理，而文件压缩、预处理等功能是它附带的功能。<br><br>使用webpack打包的命令：</p>
<blockquote>
<p>webpack ./src/main.js ./dist/bundle.js //webpack2命令<br>webpack ./src/main.js -o ./dist/bundle.js //webpack4命令</p>
</blockquote>
<p>完成后只要在html中引用bundle.js就可以了。</p>
<h2 id="2-1-webpack-config-js配置"><a href="#2-1-webpack-config-js配置" class="headerlink" title="2.1 webpack.config.js配置"></a>2.1 webpack.config.js配置</h2><p>新建webpack.config.js，将入口和出口等规则放入配置文件中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">  entry:<span class="string">'./src/main.js'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">    filename:<span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接执行webpack命令就可以完成打包。<br><br>在package.json的”scripts”中添加”build”: “webpack”，执行以下语句即可打包：</p>
<blockquote>
<p>npm run build</p>
</blockquote>
<p>package.json的scripts脚本在执行时，会按照一定顺序找命令对应的位置，首先会寻找本地的node_modules/bin路径中对应的命令，如果没有找到会去全局的环境变量中寻找&#40;如果直接执行webpack默认采用全局&#41;。除了全局还要在局部安装&#40;开发时依赖&#41;在当前目录下执行</p>
<blockquote>
<p>npm install webpack@3.6.0 –save-dev</p>
</blockquote>
<h2 id="2-2-loader"><a href="#2-2-loader" class="headerlink" title="2.2 loader"></a>2.2 loader</h2><h3 id="2-2-1-webpack中使用css文件的配置"><a href="#2-2-1-webpack中使用css文件的配置" class="headerlink" title="2.2.1 webpack中使用css文件的配置"></a>2.2.1 webpack中使用css文件的配置</h3><p>在main.js中添加对css的依赖：</p>
<blockquote>
<p>require(‘./css/normal.css’)</p>
</blockquote>
<p>loader使用过程:1.通过npm安装需要使用的loader&nbsp;2.在webpack.config.js中的modules关键字下进行配置。</p>
<blockquote>
<p>npm install –save-dev css-loader<br>npm install style-loader –save-dev</p>
</blockquote>
<p>css-loader只负责将css文件进行加载,style-loader负责将样式添加到DOM中。在webpack.config.js添加：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123; <span class="attr">loader</span>: <span class="string">"style-loader"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-less文件的处理"><a href="#2-2-2-less文件的处理" class="headerlink" title="2.2.2 less文件的处理"></a>2.2.2 less文件的处理</h3><p>main.js添加对less文件的依赖，接着通过npm安装loader</p>
<blockquote>
<p>npm install –save-dev less-loader less</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">"style-loader"</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      loader: <span class="string">"css-loader"</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      loader: <span class="string">"less-loader"</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-图片文件的处理"><a href="#2-2-3-图片文件的处理" class="headerlink" title="2.2.3 图片文件的处理"></a>2.2.3 图片文件的处理</h3><p>当加载的图片小于limit时，会将图片编译成base64字符串形式；当加载的图片大于limit时，需要使用file-loader模块进行加载。通过npm安装loader：</p>
<blockquote>
<p>npm install –save-dev url-loader<br>npm install –save-dev file-loader</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">//当加载的图片小于limit(8kb)时，会将图片编译成base64字符串形式</span></span><br><span class="line">          <span class="comment">//当加载的图片大于limit时，需要使用file-loader模块进行加载</span></span><br><span class="line">          limit: <span class="number">8192</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>同时在配置文件的output中加入publicPath，使url前自动拼接路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicPath:<span class="string">'dist/'</span></span><br></pre></td></tr></table></figure>
<p>修改文件名称：webpack打包后自动生成一个32位hash值的名字，可以在option中添加如下选项：</p>
<blockquote>
<p><strong>name:’img/[name].[hash:8].[ext]’</strong><br>img：文件要打包到的文件夹<br>name：获取图片原来的名字放在该位置<br>hash:8:为了防止图片名称冲突依旧使用hash但是只保留8位<br>ext：使用图片原来的扩展名</p>
</blockquote>
<h3 id="2-2-4-ES6转ES5的babel"><a href="#2-2-4-ES6转ES5的babel" class="headerlink" title="2.2.4 ES6转ES5的babel"></a>2.2.4 ES6转ES5的babel</h3><p>如果希望将ES6语法转成ES5，那么就需要使用babel。</p>
<blockquote>
<p>npm install –save-dev babel-loader@7 babel-core babel-preset-es2015</p>
</blockquote>
<p>配置webpack.config.js文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">      loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="2-2-5-使用Vue的配置过程"><a href="#2-2-5-使用Vue的配置过程" class="headerlink" title="2.2.5 使用Vue的配置过程"></a>2.2.5 使用Vue的配置过程</h3><p>通过mpm完成安装</p>
<blockquote>
<p>npm install vue –save</p>
</blockquote>
<p>在main.js中添加依赖</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'Vue'</span></span><br></pre></td></tr></table></figure>

<p>需要注意Vue有两类版本：1.runtime-only代码中不可以有任何的template;runtime-compiler中，可以有template，因为compiler可以用于编译template。因此需要在配置文件中配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">  alias:&#123;<span class="string">'vue$'</span>:<span class="string">'vue/dist/vue.esm.js'</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时在vue.config.js中添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">configureWebpack: &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;<span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者也可以在添加依赖时直接使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue/dist/vue.esm.js'</span></span><br></pre></td></tr></table></figure>
<p>.vue文件需要vue-loader以及vue-template-compiler来处理。同时在配置文件中配置。</p>
<blockquote>
<p>npm install vue-loader vue-template-compiler –save-dev</p>
</blockquote>
<h2 id="2-3-plugin"><a href="#2-3-plugin" class="headerlink" title="2.3 plugin"></a>2.3 plugin</h2><p>plugin是插件的意思，webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化文件压缩等等。<br><br>loader主要用于转换某些类型的模块，它是一个转换器。plugin是对webpack本身的扩展，是一个扩展器。</p>
<blockquote>
<p>plugin使用过程<br>1.通过npm安装需要使用的plugins<br>2.在webpack.config.js中的plugins中配置插件</p>
</blockquote>
<h3 id="2-3-1-BannerPlugin"><a href="#2-3-1-BannerPlugin" class="headerlink" title="2.3.1 BannerPlugin"></a>2.3.1 BannerPlugin</h3><p>BannerPlugin属于webpack自带的插件，用于为打包文件添加版权声明。修改webpack.config.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;...</span><br><span class="line">  plugins:[<span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'最终版权归doublewhite所有'</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新打包程序就可以在文件头部看到版权信息。</p>
<h3 id="2-3-2-打包html的plugin"><a href="#2-3-2-打包html的plugin" class="headerlink" title="2.3.2 打包html的plugin"></a>2.3.2 打包html的plugin</h3><p>需要将index.html打包到dist文件夹中，这个时候就可以使用HtmlWebpackPlugin插件。HtmlWebpackPlugin可以完成：自动生成一个index.html文件，将打包的js文件自动通过script标签加入到body中。<br>安装HtmlWebpackPlugin插件：</p>
<blockquote>
<p>npm install html-webpack-plugin@3.2.0 –save-dev</p>
</blockquote>
<p>修改webpack.config.js文件中的plugin:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlWebpackPlugin=<span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;...</span><br><span class="line">  plugins:[<span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">    template:<span class="string">'index.html'</span></span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的template表示根据什么模板来生成index.html。</p>
<h3 id="2-3-3-js压缩的plugin"><a href="#2-3-3-js压缩的plugin" class="headerlink" title="2.3.3 js压缩的plugin"></a>2.3.3 js压缩的plugin</h3><p>在项目发布之前，必然要对js等文件进行压缩处理，这里使用一个第三方插件uglifyjs-webpack-plugin</p>
<blockquote>
<p>npm install uglifyjs-webpack-plugin@1.1.1 –save-dev</p>
</blockquote>
<p>修改配置文件，使用插件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> uglifyWebpackPlugin=<span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;...</span><br><span class="line">  plugins:[<span class="keyword">new</span> uglifyWebpackPlugin()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看打包后的bundle.js文件已经被压缩。</p>
<h2 id="2-4-搭建本地服务器"><a href="#2-4-搭建本地服务器" class="headerlink" title="2.4 搭建本地服务器"></a>2.4 搭建本地服务器</h2><p>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。不过它是一个单独的模块，在webpack中使用之前需要先安装它。</p>
<blockquote>
<p>npm install –save-dev webpack-dev-server@2.9.1</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">  contentBase:<span class="string">'./dist'</span>,</span><br><span class="line">  inline:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>devServer选项本身可以设置如下属性：</p>
<blockquote>
<p>contentBase：为哪一个文件夹提供本地服务，默认是根文件夹<br>port：端口号<br>inline：页面实时刷新<br>historyApiFallback：在SPA页面中，依赖html5的history模式</p>
</blockquote>
<p>在package.json的”scripts”中添加”dev”: “webpack-dev-server –open”，输入以下语句即可执行。加入–open可以自动打开。</p>
<blockquote>
<p>npm run dev</p>
</blockquote>
<h1 id="3-Vue-CLI"><a href="#3-Vue-CLI" class="headerlink" title="3. Vue CLI"></a>3. Vue CLI</h1><p>开发大型项目时，必然需要使用 Vue CLI。CLI是Command-Line Interface，翻译为命令行界面。俗称脚手架。Vue CLI是一个官方发布Vue.js项目脚手架。使用Vue CLI可以快速搭建Vue开发环境以及对应的webpack配置。</p>
<blockquote>
<p>npm install -g @vue/cli</p>
</blockquote>
<p>使用Vue CLI3创建项目：</p>
<blockquote>
<p>vue create testvuecli</p>
</blockquote>
<p>目录结构：</p>
<blockquote>
<p>node_modules：npm安装包到该文件夹<br>public：相当于CLI2中的static，文件夹中内容会原封不动的复制到dist文件夹中<br>src：源代码<br>.browserslistrc：对浏览器的配置<br>.gitignore：不想上传服务器的忽略文件<br>.babel.config.js：对babel的配置<br>package.json<br>package-lock.json：中间文件，显示真实安装版本<br>README.md：详细说明文档</p>
</blockquote>
<p>修改配置的方法：1.控制台输入vue ui打开项目管理器，点击导入，通过图形化界面管理配置。2.node_modules-@vue-webpack.config.js查看隐藏配置3.当前目录下面创建vue.config.js，在其中添加配置，会和默认配置自动合并</p>
<h1 id="4-Vue-Router"><a href="#4-Vue-Router" class="headerlink" title="4. Vue-Router"></a>4. Vue-Router</h1><p>后端路由阶段：早期的网站开发整个html页面是由服务器来渲染的。服务器直接生产渲染好对应的html页面，并返回客户端进行展示。<br><br>前后端分离阶段：随着Ajax的出现，有了前后端分离的开发模式。后端只提供API来返回数据，前端通过Ajax获取数据，并且通过JavaScript将数据渲染到页面中。<br><br>单页面富应用阶段：SPA最主要的特点就是在前后端分离的基础上加了一层前端路由。也就是前端来维护一套路由规则。整个网页只有一个html页面。<br></p>
<h2 id="4-1-url的hash和html5的history"><a href="#4-1-url的hash和html5的history" class="headerlink" title="4.1 url的hash和html5的history"></a>4.1 url的hash和html5的history</h2><p>url的hash也就是锚点&#40;#&#41;，本质上是改变window.location的href属性。我们可以通过直接赋值location.hash来改变href，但页面不发生刷新。</p>
<blockquote>
<p>location.hash=’/foo’</p>
</blockquote>
<p>history接口是html5新增的，它有5种模式改变url而不刷新页面。html5的history模式:pushState:</p>
<blockquote>
<p>history.pushState({ },’’,’/foo’)</p>
</blockquote>
<p>html5的history模式:replaceState:</p>
<blockquote>
<p>history.replaceState({ },’’,’/foo’)</p>
</blockquote>
<p>html5的history模式:go:</p>
<blockquote>
<p>history.pushState({ },’’,’home’)<br>history.pushState({ },’’,’about’)<br>history.go(-1)</p>
</blockquote>
<p>history.back()等价于history.go(-1)，而history.forward()等价于history.go(1)</p>
<h2 id="4-2-安装和使用vue-router"><a href="#4-2-安装和使用vue-router" class="headerlink" title="4.2 安装和使用vue-router"></a>4.2 安装和使用vue-router</h2><blockquote>
<p>npm install vue-router –save</p>
</blockquote>
<p>安装完成后在模块化工程使用：</p>
<blockquote>
<p>第一步：导入路由对象，并且调用Vue.use(VueRouter)。<br>第二步：创建路由实例，并且传入路由映射配置。<br>第三步：在Vue实例中挂载创建的路由实例。</p>
</blockquote>
<p>在src-router-index.js中配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关信息</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.通过Vue.use(插件),安装插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> routes = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// 配置路由和组件之间的映射关系</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.将router对象传入到Vue实例中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>在main.js中挂载router:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router: router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<p>使用vue-router的步骤：</p>
<blockquote>
<p>第一步：创建路由组件<br>第二步：配置路由映射：组件和路径映射关系<br>第三步：使用路由：通过&lt;router-link&gt;和&lt;router-view&gt;</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../components/Home'</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'../components/About'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    component:Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    component:About</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在App.vue中使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">'/home'</span>&gt;首页&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;router-link to='/</span>about<span class="string">'&gt;关于&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;!--渲染位置--&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure>
<p>路由的默认路径：让路径默认到首页并且&lt;router-view&gt;渲染首页组件。方法：多配置一个映射</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    redirect:<span class="string">'/home'</span>    <span class="comment">// 重定向</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目前采用的都是hash模式，通过以下代码可以改变为history模式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode:<span class="string">'history'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>router-link还有一些其他属性：</p>
<blockquote>
<p>tag：可以指定渲染成社么组件，如tag=”button”<br>replace：replace不会留下history记录，所以指定replace的情况下，后退键返回不能返回到上一个页面中<br>active-class：当对应的路由匹配成功时，会自动给元素设置一个router-link-active的class，设置active-class可以修改默认的名称</p>
</blockquote>
<p>通过代码跳转路由：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"homeClick"</span>&gt;首页&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="aboutClick"&gt;关于&lt;/</span>button&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;<span class="regexp">/router-view&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'App',</span></span><br><span class="line"><span class="regexp">  methods:&#123;</span></span><br><span class="line"><span class="regexp">    homeClick()&#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ this.$router.push('/</span>home<span class="string">')</span></span><br><span class="line"><span class="string">      this.$router.replace('</span>/home<span class="string">')</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    aboutClick()&#123;</span></span><br><span class="line"><span class="string">      this.$router.push('</span>/about<span class="string">')</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-3-动态路由的使用"><a href="#4-3-动态路由的使用" class="headerlink" title="4.3 动态路由的使用"></a>4.3 动态路由的使用</h2><p>某些情况下，一个页面的path路径可能是不确定的，这种path和component的匹配关系称之为动态路由（也是路由传递数据的一种方式）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link v-bind:to=<span class="string">"'/user/'+userId"</span>&gt;用户&lt;<span class="regexp">/router-link&gt;</span></span><br></pre></td></tr></table></figure>
<p>index.js中配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/user/:userId'</span>,</span><br><span class="line">  component:User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过以下代码，可以拿到传来的userId：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;$route.params.userId&#125;&#125;&lt;<span class="regexp">/h3&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-4-路由懒加载"><a href="#4-4-路由懒加载" class="headerlink" title="4.4 路由懒加载"></a>4.4 路由懒加载</h2><p>当打包构建应用时，Javascript的包会变得非常大，影响页面加载。如果能把不同路由对应的组件分割成不同的代码块，当路由被访问的时候才加载对应组件，这样就更加高效。<br>dist中的js分离:</p>
<blockquote>
<p>app.js 当前应用程序开发的所有代码（业务代码）<br>manifest.js 为了打包的代码做底层支撑<br>vendor.js 第三方（vue/vue-router/axios/bs）</p>
</blockquote>
<p>懒加载的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Home=<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">'../components/Home'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="4-5-路由嵌套"><a href="#4-5-路由嵌套" class="headerlink" title="4.5 路由嵌套"></a>4.5 路由嵌套</h2><p>在index.js中配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    component:Home,</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path:<span class="string">'news'</span>,</span><br><span class="line">        component:HomeNews</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>同时需要在Home中进行展示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"/home/news"</span>&gt;新闻&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">&lt;router-view&gt;&lt;/</span>router-view&gt;</span><br></pre></td></tr></table></figure>
<h2 id="4-6-传递参数"><a href="#4-6-传递参数" class="headerlink" title="4.6 传递参数"></a>4.6 传递参数</h2><p>传递参数主要有两种类型：params和query。<br><br>params的类型：</p>
<blockquote>
<p>配置路由格式：/router/:id<br>传递的方式：在path后面跟上对应的值<br>传递后形成的路径：/router/abc</p>
</blockquote>
<p>query的类型：</p>
<blockquote>
<p>配置路由格式：/router，也就是普通配置<br>传递的方式：对象中使用query的key作为传递方式<br>传递后形成的路径：/router?id=abc</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123;path:'/profile',query:&#123;name:'doublewhite',age:'20'&#125;&#125;"</span>&gt;档案&lt;<span class="regexp">/router-link&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-7-导航守卫"><a href="#4-7-导航守卫" class="headerlink" title="4.7 导航守卫"></a>4.7 导航守卫</h2><p>vue-router的导航守卫主要是用来监听路由的进入和离开的。vue-router提供了beforeEach和afterEach钩子函数，它们会在路由即将改变前和改变后触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.title=to.matched[<span class="number">0</span>].meta.title;</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上面的导航守卫被称之为全局守卫。除此之外还有路由独享的守卫和组件内的守卫。</p>
<h2 id="4-8-keep-alive和vue-router"><a href="#4-8-keep-alive和vue-router" class="headerlink" title="4.8 keep-alive和vue-router"></a>4.8 keep-alive和vue-router</h2><p>keep-alive是Vue内置的一个组件，可以使被包含的组件保留状态，或者避免重新渲染。router-view也是一个组件，如果直接被包在keep-alive里面，所有路径匹配到的视图组件都会被缓存。</p>
<p>keep-alive有两个非常重要的属性：1.include-字符串或正则表达，只有匹配的组件会被缓存。2.exclude-字符串或正则表达式。任何匹配的组件都不会被缓存。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件化开发</title>
    <url>/2021/06/12/Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="1-组件化思想和使用步骤"><a href="#1-组件化思想和使用步骤" class="headerlink" title="1. 组件化思想和使用步骤"></a>1. 组件化思想和使用步骤</h1><p>组件化：将一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么整个页面的管理和维护就变得非常容易了。</p>
<p>Vue的组件化思想：它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造应用。任何的应用都会被抽象成一颗组件树。</p>
<a id="more"></a>

<p><img src="https://vuejs.bootcss.com/images/components.png" alt="avatar"><br>组件的使用分成三个步骤：创建组件构造器、注册组件、使用组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 1.创建组件构造器对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> cpnConstructor=Vue.extend(&#123;</span></span><br><span class="line">    template:`</span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>22222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 2.注册组件</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'my-cpn'</span>,cpnConstructor);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="2-全局组件和局部组件"><a href="#2-全局组件和局部组件" class="headerlink" title="2. 全局组件和局部组件"></a>2. 全局组件和局部组件</h1><blockquote>
<p>全局组件：调用Vue.component&#40;&#41;注册组件时，组建的注册时全局的，该组件可以在任意Vue实例下使用。<br>如果注册的组件挂载在某个实例中，那么就是一个局部组件。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 1.创建组件构造器</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> cpnC=Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 2.注册组件(全局组件：可以在多个Vue实例中使用)</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'cpn'</span>,cpnC)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components:&#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// cpn:使用组件时的标签名</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//局部组件</span></span></span><br><span class="line">      cpn:cpnC</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="3-父组件和子组件"><a href="#3-父组件和子组件" class="headerlink" title="3. 父组件和子组件"></a>3. 父组件和子组件</h1><p>组件和组件之间存在层级关系，而其中一种非常重要的关系就是父子组件关系：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 不能使用cpn1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 组件构造器1：子组件</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> cpnC1=Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>内容11111<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 组件构造器2：父组件</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> cpnC2=Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>内容22222<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn1:cpnC1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// root组件</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn2:cpnC2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="4-注册组件语法糖"><a href="#4-注册组件语法糖" class="headerlink" title="4. 注册组件语法糖"></a>4. 注册组件语法糖</h1><p>Vue提供了注册组件的语法糖，主要是省去了调用Vue.extend&#40;&#41;的步骤，而是可以直接使用一个对象来代替。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 1.全局组件注册的语法糖</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'cpn1'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 2.注册局部组件语法糖</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn2:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">        template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="5-组件模板的分离写法"><a href="#5-组件模板的分离写法" class="headerlink" title="5. 组件模板的分离写法"></a>5. 组件模板的分离写法</h1><p>将html分离出来写，然后挂载到对应的组件上，使结构变得更清晰。</p>
<blockquote>
<p>Vue提供了两种方法来定义html模块内容：<br>使用&#60;script&#62;标签<br>使用&#60;template&#62;标签</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1. script标签，注意类型必须是text/x-template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.template标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'cpn1'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">    template:<span class="string">'#cpn'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn2:&#123;</span><br><span class="line"><span class="actionscript">        template:<span class="string">'#cpn2'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="6-组件中的数据存放"><a href="#6-组件中的数据存放" class="headerlink" title="6. 组件中的数据存放"></a>6. 组件中的数据存放</h1><p>Vue组件中的data必须使用函数，这是为了保证组件的独立性，否则每一个实例的data属性都会相互影响。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"minus"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'cpn'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">    template:<span class="string">'#cpn'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line">        counter:0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      add()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.counter++</span></span><br><span class="line">      &#125;,</span><br><span class="line">      minus()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.counter--</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="7-父子组件通信"><a href="#7-父子组件通信" class="headerlink" title="7. 父子组件通信"></a>7. 父子组件通信</h1><h2 id="7-1-父传子-props"><a href="#7-1-父传子-props" class="headerlink" title="7.1 父传子-props"></a>7.1 父传子-props</h2><p>在组件中，使用选项props来声明需要从父级接收到的数据。props的值有两种方式：字符串数组，数组中的字符串就是传递时的名称。对象，对象可以设置传递时的类型，也可以设置默认值等。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:cmovies</span>=<span class="string">"movies"</span> <span class="attr">:cmessage</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 父传子:props</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> cpn=&#123;</span></span><br><span class="line"><span class="actionscript">    template:<span class="string">'#cpn'</span>,</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 数组</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// props:['cmovies','cmessage']</span></span></span><br><span class="line">    props:&#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 类型限制</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//cmovies:Array,</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// cmessage:String</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">//提供一些默认值</span></span></span><br><span class="line">      cmessage:&#123;</span><br><span class="line"><span class="javascript">        type:<span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>:<span class="string">'hi'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//required说明必须传入该值</span></span></span><br><span class="line"><span class="actionscript">        required:<span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="comment">// 类型是对象或者数组时，默认值必须是函数</span></span></span><br><span class="line">      cmovies:&#123;</span><br><span class="line"><span class="javascript">        type:<span class="built_in">Array</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>()&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> []</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">'hello'</span>,</span></span><br><span class="line"><span class="actionscript">      movies:[<span class="string">'海王'</span>,<span class="string">'海贼王'</span>,<span class="string">'海尔兄弟'</span>]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>动态绑定属性时尽量字母小写，因为v-bind不支持大写字母,如果v-bind使用驼峰需要转义，大写字母转为小写，并在前面加-。</p>
<h2 id="7-2-子传父-自定义事件"><a href="#7-2-子传父-自定义事件" class="headerlink" title="7.2 子传父-自定义事件"></a>7.2 子传父-自定义事件</h2><p>自定义事件流程：在子组件中，通过$emit&#40;&#41;来触发事件；在父组件中，通过v-on来监听子组件事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">itemclick</span>=<span class="string">"cpnClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">"item in categories"</span> @<span class="attr">click</span>=<span class="string">"btnClick(item)"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> cpn=&#123;</span></span><br><span class="line"><span class="actionscript">    template:<span class="string">'#cpn'</span>,</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line">        categories:[</span><br><span class="line"><span class="actionscript">          &#123;id:<span class="string">'aaa'</span>,name:<span class="string">'111'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">          &#123;id:<span class="string">'bbb'</span>,name:<span class="string">'222'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">          &#123;id:<span class="string">'ccc'</span>,name:<span class="string">'333'</span>&#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      btnClick(item)&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//发送事件:自定义事件</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$emit(<span class="string">'itemclick'</span>,item)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">'hello'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      cpnClick(item)&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'cpnClick'</span>,item);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="8-父子组件访问"><a href="#8-父子组件访问" class="headerlink" title="8. 父子组件访问"></a>8. 父子组件访问</h1><h2 id="8-1-父组件访问子组件"><a href="#8-1-父组件访问子组件" class="headerlink" title="8.1 父组件访问子组件"></a>8.1 父组件访问子组件</h2><p>使用$children或者$refs。this.$children是一个数组类型，包含所有子组件对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    methods:&#123;</span><br><span class="line">      btnClick()&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. $children</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$children[<span class="number">0</span>].showMessage();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[<span class="number">0</span>].name);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2.$refs</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:&#123;</span><br><span class="line"><span class="actionscript">        template:<span class="string">'#cpn'</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            name:<span class="string">'子组件name'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          showMessage()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'adad'</span>);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-2-子组件访问父组件"><a href="#8-2-子组件访问父组件" class="headerlink" title="8.2 子组件访问父组件"></a>8.2 子组件访问父组件</h2><p>使用$parent访问父组件，$root访问根组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:&#123;</span><br><span class="line"><span class="actionscript">        template:<span class="string">'#cpn'</span>,</span></span><br><span class="line">        methods:&#123;</span><br><span class="line">          btnClick()&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 1 访问父组件 $parent</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$parent);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 2 访问根组件 $root</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$root);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="9-slot"><a href="#9-slot" class="headerlink" title="9. slot"></a>9. slot</h1><h2 id="9-1-插槽的基本使用"><a href="#9-1-插槽的基本使用" class="headerlink" title="9.1 插槽的基本使用"></a>9.1 插槽的基本使用</h2><p>组件的插槽是为了让封装的组件更加具有扩展性，让使用者可以决定组件内部的一些内容到底展示什么。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>22222<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:&#123;</span><br><span class="line"><span class="actionscript">        template:<span class="string">'#cpn'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="9-2-具名插槽"><a href="#9-2-具名插槽" class="headerlink" title="9.2 具名插槽"></a>9.2 具名插槽</h2><p>目前v-slot取代原有的slot和slot-scope。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"middle"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"right"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>left<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>right<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:&#123;</span><br><span class="line"><span class="actionscript">        template:<span class="string">'#cpn'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="9-3-作用域插槽"><a href="#9-3-作用域插槽" class="headerlink" title="9.3 作用域插槽"></a>9.3 作用域插槽</h2><p>编译作用域：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。<br><br>作用域插槽：父组件替换插槽的标签，但是内容由子组件来提供。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目的是获取子组件中的 pLanguages --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"slot"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"item in slot.data"</span>&gt;</span>&#123;&#123;item&#125;&#125; -<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">"pLanguages"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"i in pLanguages"</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:&#123;</span><br><span class="line"><span class="actionscript">        template:<span class="string">'#cpn'</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            pLanguages:[<span class="string">'Java'</span>,<span class="string">'C'</span>,<span class="string">'Python'</span>,<span class="string">'C#'</span>,<span class="string">'Go'</span>]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
