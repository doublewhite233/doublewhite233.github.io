<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript高级程序设计</title>
    <url>/2021/05/13/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="1-语言基础"><a href="#1-语言基础" class="headerlink" title="1. 语言基础"></a>1. 语言基础</h2><h3 id="1-1-严格模式"><a href="#1-1-严格模式" class="headerlink" title="1.1 严格模式"></a>1.1 严格模式</h3><p>ES5新增严格模式概念。严格模式是一种不同的JavaScript解析和执行模型，一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。如要启用严格模式，在脚本开头或函数体开头加入：</p>
<a id="more"></a>

<blockquote>
<p>“use strict”;</p>
</blockquote>
<p>严格模式的限制有：不允许使用未声明的变量；不允许删除变量或对象；不允许删除函数；不允许变量重名；不允许使用八进制；不允许使用转义字符；不允许对只读属性赋值；不允许对一个使用getter方法读取的属性进行赋值；不允许定义名为eval和arguments的变量等。</p>
<h3 id="1-2-变量"><a href="#1-2-变量" class="headerlink" title="1.2 变量"></a>1.2 变量</h3><p>ECMAScript变量是松散类型的，意思是变量可以用于保存各种类型的数据。有3个关键字可以声明变量：<strong>var、const、let</strong>。</p>
<h4 id="1-2-1-var声明提升"><a href="#1-2-1-var声明提升" class="headerlink" title="1.2.1 var声明提升"></a>1.2.1 var声明提升</h4><p>“提升”就是把所有变量声明都拉到函数作用域的顶部。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(age)</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>由于变量的声明被自动提升到了函数作用域的顶部，因此不会报错，这段代码等价于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age</span><br><span class="line">    <span class="built_in">console</span>.log(age)</span><br><span class="line">    age = <span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-let与var的对比"><a href="#1-2-2-let与var的对比" class="headerlink" title="1.2.2 let与var的对比"></a>1.2.2 let与var的对比</h4><ul>
<li>let声明的范围是块作用域，所声明变量只在let命令所在代码块内有效；var声明的范围是函数作用域。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">26</span></span><br><span class="line">    <span class="built_in">console</span>.log(age) <span class="comment">// 26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">// ReferenceError =&gt; 如果使用var输出26</span></span><br></pre></td></tr></table></figure>

<ul>
<li>let和var的另一个重要区别是let有<strong>暂时性死区</strong>的约束，也就是let声明的变量不会在作用域中被提升。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'aa'</span></span><br></pre></td></tr></table></figure>

<p>在let声明之前的执行瞬间被称为暂时性死区，在此阶段引用任何后面才声明的变量都会抛出ReferenceError。 </p>
<ul>
<li>与var不同，使用let在全局作用域中声明的变量不会成为window对象的属性。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'a'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name) <span class="comment">// 'a'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3 数据类型"></a>1.3 数据类型</h3><p>ES6有6种简单数据类型（原始类型）：Undefined、Null、Boolean、Number、String和Symbol（ES6新增）。还有一种复杂数据类型Object（对象）。</p>
<h4 id="1-3-1-typeof操作符"><a href="#1-3-1-typeof操作符" class="headerlink" title="1.3.1 typeof操作符"></a>1.3.1 typeof操作符</h4>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
